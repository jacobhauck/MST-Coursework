>python -m qr
Test 1: random square matrix
Input matrix (a)
[[ 1.66804732  0.73734773 -0.20153776 -0.15091195  0.91605181]
 [ 1.16032964 -2.619962   -1.32529457  0.45998862  0.10205165]
 [ 1.05355278  1.62404261 -1.50063502 -0.27783169  1.19399502]
 [ 0.86181533 -0.41704604 -0.24953642  0.94367735 -0.76631064]
 [ 0.20822873  1.40872293 -1.48910401 -1.47580853  0.99084632]]

Orthogonal factor (u)
[[ 0.67957418  0.22419956  0.51727769 -0.46886764  0.02237023]
 [ 0.47272643 -0.74100785 -0.43180719 -0.13850957  0.1476304 ]
 [ 0.42922479  0.4732441  -0.33826165  0.4980688   0.47886598]
 [ 0.35110961 -0.11263953  0.14832524  0.58494213 -0.7070196 ]
 [ 0.08483385  0.40496207 -0.63995705 -0.41321716 -0.49851329]]

Upper-triangular factor (t)
[[ 2.45454783 -0.06728495 -1.62151243  0.20177634  0.9982582 ]
 [ 0.          3.49274926 -0.34822064 -1.21011363  1.18238049]
 [ 0.          0.          1.89157808  0.90171527 -0.72185849]
 [ 0.          0.          0.          1.03049165 -0.70663258]
 [ 0.          0.          0.          0.          0.6551684 ]]

u is orthogonal? True
a = ut? True

Test 2: matrix with too many rows
Input matrix (a)
[[0.23898683 0.4377217  0.8835387 ]
 [0.28928114 0.78450686 0.75895366]
 [0.41778538 0.22576877 0.42009814]
 [0.06436369 0.59643269 0.83732372]
 [0.89248639 0.20052744 0.50239523]]

Matrix was the wrong size

Test 3: matrix with first column 0
Input matrix (a)
[[0 1 2]
 [0 3 4]
 [0 5 6]]

Matrix is singular or almost singular because first column is almost 0

Test 4: singular matrix
Input matrix (a)
[[ 1  2 -1]
 [ 2  5 -3]
 [ 3  3  0]]

Aborting QR factorization. Matrix has linearly dependent or almost linearly dependent columns.
